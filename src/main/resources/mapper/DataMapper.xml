<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stock.mapper.DataMapper">

    <select id="getLastDate" parameterType="String" resultType="String">
        select max(h_date)
		from history
		where ticker = #{value}
    </select>

    <insert id="insert" parameterType="List">
		insert into history 
		(
			ticker
			, h_date
			, open_price
			, high_price
			, low_price
			, close_price
			, h_change
		) 
		values 
		<foreach collection="list" item="item" separator=",">
		(
			#{item.ticker}
			, #{item.date}
			, #{item.openPrice}
			, #{item.highPrice}
			, #{item.lowPrice}
			, #{item.closePrice}
			, #{item.change}
		)
		</foreach>
    </insert>

    <select id="select" parameterType="String" resultType="Map">
		select ticker
			, h_date as 'date'
			, open_price as 'openPrice'
			, high_price as 'highPrice'
			, low_price as 'lowPrice'
			, close_price as 'closePrice'
			, h_change as 'change'
		from history
		where ticker = #{value}
		order by h_date
    </select>

    <select id="getLastSeq" parameterType="String">
		select max(seq)
		from next_buy_ticker
    </select>
    
    <insert id="insertNextBuyTicker" parameterType="List">
		insert into next_buy_ticker 
		(
			seq
			, bDate
			, nextTicker
			, nextWeight
			, startLength
			, endLength
			, bestLength
			, bestPercent
			, averageByPlus
			, averageByMinus
		) 
		values 
		<foreach collection="list" item="item" separator=",">
		(
			#{item.seq}
			, #{item.date}
			, #{item.ticker}
			, #{item.weight}
			, #{item.startLength}
			, #{item.endLength}
			, #{item.bestLength}
			, #{item.bestPercent}
			, #{item.averageByPlus}
			, #{item.averageByMinus}
		)
		</foreach>
    </insert>

    <select id="selectNextBuyTicker" parameterType="int" resultType="Map">
		select bDate as 'date'
			, nextTicker as 'ticker'
			, nextWeight as 'weight'
			, bestLength
			, bestPercent
			, averageByPlus
			, averageByMinus
		from next_buy_ticker
		where seq = #{num}
		order by bDate
	</select>
	
    <select id="getLastSubSeq" parameterType="int">
   		select max(subSeq)
		from buy_result
		where seq = #{num}
    </select>
    
    <insert id="insertNextBuyTickerResult" parameterType="List">
		insert into next_buy_ticker_result 
		(
			seq
			, bDate
			, profitAndLoss
			, todayProfitAndLoss
			, unrealizedProfitAndLoss
			, avgProfitAndLossByMonth
			, avgProfitAndLossByYear
			, oneMonthAgoProfitAndLoss
			, twoMonthAgoProfitAndLoss
			, threeMonthAgoProfitAndLoss
			, sixMonthAgoProfitAndLoss
		) 
		values 
		<foreach collection="list" item="item" separator=",">
		(
			#{item.seq}
			, #{item.date}
			, #{item.profitAndLoss}
			, #{item.todayProfitAndLoss}
			, #{item.unrealizedProfitAndLoss}
			, #{item.avgProfitAndLossByMonth}
			, #{item.avgProfitAndLossByYear}
			, #{item.oneMonthAgoProfitAndLoss}
			, #{item.twoMonthAgoProfitAndLoss}
			, #{item.threeMonthAgoProfitAndLoss}
			, #{item.sixMonthAgoProfitAndLoss}
		)
		</foreach>
    </insert>

    <select id="selectNextBuyTickerResult" parameterType="String" resultType="Map">
		select a.seq
			, a.bDate as 'date'
			, b.nextTicker as 'ticker'
			, b.nextWeight as 'weight'
			, b.averageByPlus
			, b.averageByMinus
			, a.profitandloss
			, a.oneMonthAgoProfitAndLoss
			, a.twoMonthAgoProfitAndLoss
			, a.threeMonthAgoProfitAndLoss
			, a.sixMonthAgoProfitAndLoss
			, a.avgProfitAndLossByMonth
			, a.avgProfitAndLossByYear
		from next_buy_ticker_result a
		inner join next_buy_ticker b
		on a.seq = b.seq
		and a.bDate = b.bDate
		where 1=1
		and a.bDate between concat(#{value}, '0101') and concat(#{value}, '1231')
		order by a.bDate, a.seq
	</select>
    
    <insert id="insertScript" parameterType="Map">
		insert into script 
		(
			script
		)
		values 
		(
			#{script}
		)
    </insert>
    
    <insert id="insertSimulationResult" parameterType="List">
		insert into simulation_result 
		(
			seq
			, bDate
			, profitAndLoss
			, todayProfitAndLoss
			, unrealizedProfitAndLoss
			, avgProfitAndLossByMonth
			, avgProfitAndLossByYear
			, oneMonthAgoProfitAndLoss
			, twoMonthAgoProfitAndLoss
			, threeMonthAgoProfitAndLoss
			, sixMonthAgoProfitAndLoss
		) 
		values 
		<foreach collection="list" item="item" separator=",">
		(
			#{item.seq}
			, #{item.date}
			, #{item.profitAndLoss}
			, #{item.todayProfitAndLoss}
			, #{item.unrealizedProfitAndLoss}
			, #{item.avgProfitAndLossByMonth}
			, #{item.avgProfitAndLossByYear}
			, #{item.oneMonthAgoProfitAndLoss}
			, #{item.twoMonthAgoProfitAndLoss}
			, #{item.threeMonthAgoProfitAndLoss}
			, #{item.sixMonthAgoProfitAndLoss}
		)
		</foreach>
    </insert>
    
</mapper>